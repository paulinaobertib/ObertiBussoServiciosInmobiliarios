server:
  port: 8081

property:
  service:
    url: "https://${PROPERTY_HOSTNAME}"

eureka:
  instance:
    hostname: ${WEBSITE_HOSTNAME}
    nonSecurePortEnabled: false
    nonSecurePort: 8081
    securePort: 8081
    securePortEnabled: true
    prefer-ip-address: false

  client:
    service-url:
      defaultZone: https://${EUREKA_HOSTNAME}/eureka/

spring:
  application:
    name: ms-users

management:
  endpoints:
    web:
      exposure:
        include: "ping,health"
  health:
    defaults:
      enabled: false    # desactiva chequeos pesados
    ping:
      enabled: true     # responde apenas levante el contexto
    probes:
      enabled: true     # readiness/liveness internos

  datasource:
    url: ${SPRING_DATASOURCE_URL}
    username: ${SPRING_DATASOURCE_USERNAME}
    password: ${SPRING_DATASOURCE_PASSWORD}
    driver-class-name: com.mysql.cj.jdbc.Driver

  jpa:
    open-in-view: false
    show-sql: true
    hibernate:
      ddl-auto: update

  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: ${SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI}

email:
  username: ${EMAIL_USERNAME}
  password: ${EMAIL_PASSWORD}

frontend:
  base-url: ${SWA_FRONTEND}

pi:
  keycloak:
    serverUrl: https://${KEYCLOAK_HOSTNAME}/
    realm: obertibussoserviciosinmobiliarios
    clientId: ${KEYCLOAK_SB_CLIENT_ID}
    clientSecret: ${KEYCLOAK_SB_CLIENT_SECRET}


# client: # Ver esto que es nuevo
#   secret: qI8ZfJH8VnL2bBt7T4z0c91wWoTQUxAWm6q1fXKhfH4=

logging:
  level:
    org.hibernate.engine.jdbc.batch.internal.BatchingBatch: DEBUG
    org.hibernate.type.descriptor.sql: TRACE
    org.springframework.orm.jpa: DEBUG

---

# Configuraci√≥n para perfil "test" - Ver si esto sirve aca
spring:
  config:
    activate:
      on-profile: test
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1
    driver-class-name: org.h2.Driver
    username: sa
    password:
  jpa:
    hibernate:
      ddl-auto: create-drop
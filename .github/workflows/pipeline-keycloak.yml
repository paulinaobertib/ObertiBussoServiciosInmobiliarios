name: CI/CD - Keycloak

on:
  workflow_dispatch:
  push:
    branches:
      - feature/pipeline

# --------------------------------------------------------------
# VARIABLES GLOBALES
# --------------------------------------------------------------
env:
  # Azure
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  ACA_ENVIRONMENT: ${{ secrets.ACA_ENVIRONMENT }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AZURE_KEYCLOAK_ACCOUNT: storagekeycloak
  AZURE_FILE_SHARE: keycloak-data

  # Docker Hub
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  # Health-check
  HEALTH_PATH: /actuator/health

  # Gateway-specific
  IMAGE_NAME: keycloak
  ACA_KEYCLOAK_DEV: ${{ vars.ACA_KEYCLOAK_DEV }}
  ACA_KEYCLOAK_PROD: ${{ vars.ACA_KEYCLOAK_PROD }}
  FILE_VOLUME_NAME: keycloakstorage
  REALM_FILE_PATH: ./realm/realm-obertibussoserviciosinmobiliarios.json
  SERVICE_PORT: 8080

jobs:
  # --------------------------------------------------------------
  # JOB 1: Build · Test · Docker
  # --------------------------------------------------------------
  build-and-push:
    name: Build · Test · Docker
    runs-on: ubuntu-latest

    outputs:
      tag: ${{ steps.build-image.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker Image
        id: build-image
        run: |
          TAG=${GITHUB_SHA::8}
          IMAGE="docker.io/${{env.DOCKERHUB_USERNAME}}/${{ env.IMAGE_NAME }}:$TAG"
          docker build --no-cache -t $IMAGE -f ${{ env.IMAGE_NAME }}/Dockerfile .
          docker push $IMAGE
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  # --------------------------------------------------------------
  # JOB 2: Deploy to Development
  # --------------------------------------------------------------
  deploy-dev:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}
      - name: Ensure Container App
        uses: azure/cli@v1
        with:
          azcliversion: latest
          inlineScript: |
            set -e
            TAG=${{ needs.build-and-push.outputs.tag }}
            IMAGE="docker.io/${{ env.DOCKERHUB_USERNAME}}/${{ env.IMAGE_NAME }}:$TAG"
            FQDN=$(az containerapp show \
              -g ${{ env.AZURE_RESOURCE_GROUP }} \
              -n ${{ env.ACA_KEYCLOAK_DEV }} \
              --query properties.configuration.ingress.fqdn -o tsv)

            if ! az containerapp show -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.ACA_KEYCLOAK_DEV }} &>/dev/null; then
              az containerapp create \
                -g ${{ env.AZURE_RESOURCE_GROUP }} \
                -n ${{ env.ACA_KEYCLOAK_DEV }} \
                --environment ${{ env.ACA_ENVIRONMENT }} \
                --image $IMAGE \
                --ingress external \
                --target-port ${{ env.SERVICE_PORT }} \
                --registry-server docker.io \
                --registry-username ${{ env.DOCKERHUB_USERNAME }} \
                --registry-password ${{ env.DOCKERHUB_TOKEN }} \
                --cpu 2.5 --memory 5Gi \
                --env-vars \
                   KC_HOSTNAME=$FQDN
            else
              az containerapp update \
                -g ${{ env.AZURE_RESOURCE_GROUP }} \
                -n ${{ env.ACA_KEYCLOAK_DEV }} \
                --image $IMAGE \
                --set-env-vars KC_HOSTNAME=$FQDN \
                --set properties.template.spec.volumes="[{'name':'keycloakstorage','storageType':'AzureFile','storageName':'keycloakstorage'}]" \
                --set properties.template.spec.containers[0].volumeMounts="[{'name':'keycloakstorage','mountPath':'/opt/keycloak/data'}]"
            fi

      - name: Register Azure File Share
        uses: azure/cli@v1
        with:
          inlineScript: |
            RG=${{ env.AZURE_RESOURCE_GROUP }}
            ENV=${{ env.ACA_ENVIRONMENT }}
            VOL=${{ env.FILE_VOLUME_NAME }}
            ACCOUNT=${{ env.AZURE_KEYCLOAK_ACCOUNT }}
            SHARE=${{ env.AZURE_FILE_SHARE }}
            az extension add --name containerapp --upgrade
            if ! az containerapp env storage list -g $RG -n $ENV \
                  --query "[?name=='$VOL']" -o tsv | grep -q "$VOL"; then
              KEY=$(az storage account keys list -g $RG -n $ACCOUNT --query '[0].value' -o tsv)
              az containerapp env storage set \
                --resource-group $RG --name $ENV \
                --storage-name $VOL --storage-type AzureFile \
                --azure-file-account-name $ACCOUNT \
                --azure-file-account-key  $KEY \
                --azure-file-share-name   $SHARE \
                --access-mode ReadWrite
            fi

      - name: Apply Volume & Restart
        uses: azure/cli@v1
        with:
          inlineScript: |
            az containerapp update \
              -g ${{ env.AZURE_RESOURCE_GROUP }} \
              -n ${{ env.ACA_KEYCLOAK_DEV }} \
              --yaml app.yaml
            REV=$(az containerapp show -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.ACA_KEYCLOAK_DEV }} \
                   --query properties.latestReadyRevisionName -o tsv)
            az containerapp revision restart -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.ACA_KEYCLOAK_DEV }} --revision $REV

      - name: Health Check Keycloak
        run: |
          FQDN=$(az containerapp show -g ${{ env.AZURE_RESOURCE_GROUP }} -n ${{ env.ACA_KEYCLOAK_DEV }} \
                  --query properties.configuration.ingress.fqdn -o tsv)
          URL="https://$FQDN/realms/obertibussoserviciosinmobiliarios/.well-known/openid-configuration"
          for i in $(seq 1 10); do
            HTTP=$(curl -sSf -w "%{http_code}" -o /dev/null "$URL") || HTTP=000
            if [ "$HTTP" -ge 200 ] && [ "$HTTP" -lt 300 ]; then
              echo "✅ Keycloak healthy ($HTTP)" && exit 0
            fi
            sleep 5
          done
          echo "❌ Health-check failed" && exit 1

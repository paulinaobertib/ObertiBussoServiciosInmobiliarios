name: CI/CD - Keycloak

on:
  workflow_dispatch:
  push:
    branches:
      - feature/pipelinesDetails
      # - main

# --------------------------------------------------------------
# VARIABLES GLOBALES
# --------------------------------------------------------------
env:
  # Azure
  AZURE_CREDENTIALS: ${{ vars.AZURE_CREDENTIALS }}
  AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
  AZURE_RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}

  # Docker Hub
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  # Properties-specific
  IMAGE_NAME: keycloak
  APP_PLAN_DEV: ${{ secrets.APP_PLAN_EDGE_DEV }}
  APP_PLAN_PROD: ${{ secrets.APP_PLAN_EDGE_PROD }}
  APP_NAME_DEV: ${{ secrets.APP_KEYCLOAK_DEV }}
  APP_NAME_PROD: ${{ secrets.APP_KEYCLOAK_PROD }}

  SERVICE_PORT: 8080

jobs:
  # --------------------------------------------------------------
  # JOB 1: Build Â· Test Â· Docker
  # --------------------------------------------------------------
  build-and-push:
    name: Build Â· Test Â· Docker
    runs-on: ubuntu-latest

    outputs:
      tag: ${{ steps.set-tag.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Set Docker image tag
        id: set-tag
        run: |
          TAG=${GITHUB_SHA::8}
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build & Push Docker image
        run: |
          TAG=${{ steps.set-tag.outputs.tag }}
          IMAGE="docker.io/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$TAG"
          docker build --no-cache -t $IMAGE -f keycloak/Dockerfile .
          docker push $IMAGE

  # --------------------------------------------------------------
  # JOB 2: Deploy to Development
  # --------------------------------------------------------------
  deploy-dev:
    name: Deploy to Development
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Set variables
        id: vars
        run: |
          echo "IMAGE=docker.io/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.tag }}" >> $GITHUB_ENV

      - name: Create Web App (if not exists)
        run: |
          az webapp create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --plan ${{ env.APP_PLAN_DEV }} \
            --name ${{ env.APP_NAME_DEV }} \
            --deployment-container-image-name $IMAGE

      - name: Configure Web App container
        run: |
          az webapp config container set \
            --name ${{ env.APP_NAME_DEV }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --container-image-name $IMAGE \
            --container-registry-url https://index.docker.io \
            --container-registry-user ${{ env.DOCKERHUB_USERNAME }} \
            --container-registry-password ${{ env.DOCKERHUB_TOKEN }}

      - name: Ensure App Service Is Running
        run: |
          echo "Verificando estado del App Service..."
          status=$(az webapp show \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.APP_NAME_DEV }} \
            --query state -o tsv)
          echo "Estado actual: $status"
          if [ "$status" != "Running" ]; then
            echo "ðŸ”„ Iniciando App Service..."
            az webapp start \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --name ${{ env.APP_NAME_DEV }}
          else
            echo "âœ… App Service ya estÃ¡ en ejecuciÃ³n."
          fi

      - name: Set environment variables (App Settings)
        run: |
          az webapp config appsettings set \
            --name ${{ env.APP_NAME_DEV }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --settings \
              "WEBSITES_ENABLE_APP_SERVICE_STORAGE=true" \
              "WEBSITES_PORT=${{ env.SERVICE_PORT }}" \
              "SERVICE_PORT=${{ env.SERVICE_PORT }}" \
              "KC_DB=dev-file" \
              "KC_DB_FILE_DIR=/home/data/h2" \
              "KC_HTTP_PORT=${{ env.SERVICE_PORT }}" \
              "KC_HEALTH_ENABLED=true" \
              "KC_METRICS_ENABLED=true" \
              "KC_PROXY=edge" \
              "KC_HOSTNAME_STRICT=false" \
              "KC_PROXY_HEADERS=xforwarded" \
              "KEYCLOAK_ADMIN=${{ secrets.KEYCLOAK_ADMIN }}" \
              "KEYCLOAK_ADMIN_PASSWORD=${{ secrets.KEYCLOAK_ADMIN_PASSWORD }}" \
              "KC_HOSTNAME=${{ env.APP_NAME_DEV }}.azurewebsites.net"

      - name: Reiniciar Web App para aplicar los App Settings
        run: |
          az webapp restart \
            --name ${{ env.APP_NAME_DEV }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }}

      - name: Enable Container Logs
        run: |
          az webapp log config \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.APP_NAME_DEV }} \
            --docker-container-logging filesystem

  # --------------------------------------------------------------
  # JOB 3: Deploy to Production
  # --------------------------------------------------------------
  # deploy-prod:
  #   name: Deploy to Production
  #   needs: [deploy-dev, build-and-push]
  #   runs-on: ubuntu-latest
  #   environment: production

  #   steps:
  #     - name: Azure Login
  #       uses: azure/login@v1
  #       with:
  #         creds: ${{ env.AZURE_CREDENTIALS }}
  #         enable-AzPSSession: true

  #     - name: Set variables
  #       id: vars
  #       run: |
  #         echo "IMAGE=docker.io/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.tag }}" >> $GITHUB_ENV

  #     - name: Create Web App (if not exists)
  #       run: |
  #         az webapp create \
  #           --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
  #           --plan ${{ env.APP_PLAN_PROD }} \
  #           --name ${{ env.APP_NAME_PROD }} \
  #           --deployment-container-image-name $IMAGE

  #     - name: Configure Web App container
  #       run: |
  #         az webapp config container set \
  #           --name ${{ env.APP_NAME_PROD }} \
  #           --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
  #           --container-image-name $IMAGE \
  #           --container-registry-url https://index.docker.io \
  #           --container-registry-user ${{ env.DOCKERHUB_USERNAME }} \
  #           --container-registry-password ${{ env.DOCKERHUB_TOKEN }}

  #     - name: Ensure App Service Is Running
  #       run: |
  #         echo "Verificando estado del App Service..."
  #         status=$(az webapp show \
  #           --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
  #           --name ${{ env.APP_NAME_PROD }} \
  #           --query state -o tsv)
  #         echo "Estado actual: $status"
  #         if [ "$status" != "Running" ]; then
  #           echo "ðŸ”„ Iniciando App Service..."
  #           az webapp start \
  #             --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
  #             --name ${{ env.APP_NAME_PROD }}
  #         else
  #           echo "âœ… App Service ya estÃ¡ en ejecuciÃ³n."
  #         fi

  #     - name: Set environment variables (App Settings)
  #       run: |
  #         az webapp config appsettings set \
  #           --name ${{ env.APP_NAME_PROD }} \
  #           --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
  #           --settings \
  #             "WEBSITES_ENABLE_APP_SERVICE_STORAGE=true" \
  #             "WEBSITES_PORT=${{ env.SERVICE_PORT }}" \
  #             "SERVICE_PORT=${{ env.SERVICE_PORT }}" \
  #             "KC_DB=dev-file" \
  #             "KC_DB_FILE_DIR=/home/data/h2" \
  #             "KC_HTTP_PORT=${{ env.SERVICE_PORT }}" \
  #             "KC_HEALTH_ENABLED=true" \
  #             "KC_METRICS_ENABLED=true" \
  #             "KC_PROXY=edge" \
  #             "KC_HOSTNAME_STRICT=false" \
  #             "KC_PROXY_HEADERS=xforwarded" \
  #             "KEYCLOAK_ADMIN=${{ secrets.KEYCLOAK_ADMIN }}" \
  #             "KEYCLOAK_ADMIN_PASSWORD=${{ secrets.KEYCLOAK_ADMIN_PASSWORD }}" \
  #             "KC_HOSTNAME=${{ env.APP_NAME_PROD }}.azurewebsites.net"

  #     - name: Reiniciar Web App para aplicar los App Settings
  #       run: |
  #         az webapp restart \
  #           --name ${{ env.APP_NAME_PROD }} \
  #           --resource-group ${{ env.AZURE_RESOURCE_GROUP }}

  #     - name: Enable Container Logs
  #       run: |
  #         az webapp log config \
  #           --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
  #           --name ${{ env.APP_NAME_PROD }} \
  #           --docker-container-logging filesystem

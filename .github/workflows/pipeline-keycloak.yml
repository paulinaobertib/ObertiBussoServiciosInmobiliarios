name: CI/CD - Keycloak

on:
  workflow_dispatch:
  push:
    branches:
      - feature/pipeline

# --------------------------------------------------------------
# VARIABLES GLOBALES
# --------------------------------------------------------------
env:
  # Azure
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  ACA_ENVIRONMENT: ${{ secrets.ACA_ENVIRONMENT }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AZURE_KEYCLOAK_ACCOUNT: storagekeycloak
  AZURE_FILE_SHARE: keycloak-data

  # Docker Hub
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  # Health-check
  HEALTH_PATH: /actuator/health

  # Gateway-specific
  IMAGE_NAME: keycloak
  ACA_KEYCLOAK_DEV: ${{ vars.ACA_KEYCLOAK_DEV }}
  ACA_KEYCLOAK_PROD: ${{ vars.ACA_KEYCLOAK_PROD }}
  FILE_VOLUME_NAME: keycloakstorage
  REALM_FILE_PATH: ./realm/realm-obertibussoserviciosinmobiliarios.json
  SERVICE_PORT: 8080

jobs:
  # --------------------------------------------------------------
  # JOB 1: Build ¬∑ Test ¬∑ Docker
  # --------------------------------------------------------------
  build-and-push:
    name: Build ¬∑ Test ¬∑ Docker
    runs-on: ubuntu-latest

    outputs:
      tag: ${{ steps.build-image.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker Image
        id: build-image
        run: |
          TAG=${GITHUB_SHA::8}
          IMAGE="docker.io/${{env.DOCKERHUB_USERNAME}}/${{ env.IMAGE_NAME }}:$TAG"
          docker build --no-cache -t $IMAGE -f ${{ env.IMAGE_NAME }}/Dockerfile .
          docker push $IMAGE
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  # --------------------------------------------------------------
  # JOB 2: Deploy to Development
  # --------------------------------------------------------------
  deploy-dev:
    name: Deploy to Development
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: development

    steps:
      # 1Ô∏è‚É£ Login a Azure
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      # 2Ô∏è‚É£ Crear la Container App si no existe
      - name: Ensure Container App Exists
        uses: azure/cli@v1
        with:
          azcliversion: latest
          inlineScript: |
            set -e
            TAG=${{ needs.build-and-push.outputs.tag }}
            IMAGE="docker.io/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$TAG"

            if ! az containerapp show -g $AZURE_RESOURCE_GROUP -n $ACA_KEYCLOAK_DEV &>/dev/null; then
              echo "üöÄ Creando $ACA_KEYCLOAK_DEV..."
              az containerapp create \
                -g $AZURE_RESOURCE_GROUP \
                -n $ACA_KEYCLOAK_DEV \
                --environment $ACA_ENVIRONMENT \
                --image $IMAGE \
                --ingress external \
                --target-port $SERVICE_PORT \
                --registry-server docker.io \
                --registry-username $DOCKERHUB_USERNAME \
                --registry-password $DOCKERHUB_TOKEN \
                --cpu 2.5 --memory 5Gi \
                --env-vars KC_DB=dev-file \
                           KC_SPI_DB_LOCK_DEFAULT_PROVIDER=noop \
                           KC_CACHE=local \
                           KC_DB_URL='jdbc:h2:file:/opt/keycloak/data/h2/keycloakdb;MODE=MySQL;DATABASE_TO_UPPER=FALSE;NON_KEYWORDS=VALUE' \
                           KC_BOOTSTRAP_ADMIN_USERNAME=${{ secrets.KEYCLOAK_ADMIN }} \
                           KC_BOOTSTRAP_ADMIN_PASSWORD=${{ secrets.KEYCLOAK_ADMIN_PASSWORD }}
            else
              echo "‚úèÔ∏è $ACA_KEYCLOAK_DEV ya existe."
            fi

      # 3Ô∏è‚É£ Registrar (o verificar) Azure File Share en el Environment
      - name: Register Azure File Share
        uses: azure/cli@v1
        with:
          azcliversion: latest
          inlineScript: |
            set -e
            RG=$AZURE_RESOURCE_GROUP
            ENV=$ACA_ENVIRONMENT
            VOL=$FILE_VOLUME_NAME
            ACCOUNT=$AZURE_KEYCLOAK_ACCOUNT
            SHARE=$AZURE_FILE_SHARE

            az extension add --name containerapp --upgrade

            if ! az containerapp env storage list -g $RG -n $ENV \
                  --query "[?name=='$VOL']" -o tsv | grep -q "$VOL"; then
              echo "üöÄ Registrando file-share '$SHARE' como volumen '$VOL'..."
              KEY=$(az storage account keys list -g $RG -n $ACCOUNT --query '[0].value' -o tsv)
              az containerapp env storage set \
                --resource-group $RG --name $ENV \
                --storage-name $VOL --storage-type AzureFile \
                --azure-file-account-name $ACCOUNT \
                --azure-file-account-key  $KEY \
                --azure-file-share-name   $SHARE \
                --access-mode ReadWrite
            else
              echo "‚úÖ Volumen '$VOL' ya existe en el Environment."
            fi

      # 4Ô∏è‚É£ Exportar la definici√≥n a YAML
      - name: Export Container App template to YAML
        uses: azure/cli@v1
        with:
          azcliversion: latest
          inlineScript: |
            az containerapp show \
              --name $ACA_KEYCLOAK_DEV \
              --resource-group $AZURE_RESOURCE_GROUP \
              --query properties.template \
              -o yaml > app.yaml
            echo "üìù S√≥lo properties.template exportado a app.yaml."

      # 5Ô∏è‚É£ Inyectar volumen y mount con yq
      - name: Inject AzureFile volume & mount
        run: |
          set -e
          # Instala yq si falta
          if ! command -v yq >/dev/null; then
            sudo wget -qO /usr/local/bin/yq \
              https://github.com/mikefarah/yq/releases/download/v4.42.1/yq_linux_amd64
            sudo chmod +x /usr/local/bin/yq
          fi    
          # Usa la variable de entorno provista por GitHub Actions
          VOL=${{ env.FILE_VOLUME_NAME }}    
          # 1) A√±adir el AzureFile volume
          yq -i '.template.spec.volumes += [{"name":"'"$VOL"'","storageType":"AzureFile","storageName":"'"$VOL"'"}]' app.yaml    
          # 2) A√±adir el volumeMount en /opt/keycloak/data
          yq -i '.template.spec.containers[0].volumeMounts += [{"name":"'"$VOL"'","mountPath":"/opt/keycloak/data"}]' app.yaml    
          echo "‚úÖ Volumen y mount inyectados en app.yaml."

      # 6Ô∏è‚É£ Aplicar el YAML modificado
      - name: Apply YAML to Container App
        uses: azure/cli@v1
        with:
          inlineScript: |
            az containerapp update \
              --name $ACA_KEYCLOAK_DEV \
              --resource-group $AZURE_RESOURCE_GROUP \
              --yaml app.yaml
            echo "üöÄ YAML aplicado; AzureFile montado."

      - name: Fetch FQDNs
        uses: azure/cli@v1
        with:
          azcliversion: latest
          inlineScript: |
            FQDN=$(az containerapp show \
              -g ${{ env.AZURE_RESOURCE_GROUP }} \
              -n ${{ vars.ACA_KEYCLOAK_DEV }} \
              --query properties.configuration.ingress.fqdn -o tsv)
            echo "üîñ Keycloak FQDN: $FQDN"
            echo "KEYCLOAK_HOSTNAME=$FQDN" >> $GITHUB_ENV

      # 7Ô∏è‚É£ Actualizar imagen y escalar
      - name: Update Image & Scale
        uses: azure/cli@v1
        with:
          azcliversion: latest
          inlineScript: |
            set -e
            TAG=${{ needs.build-and-push.outputs.tag }}
            IMAGE="docker.io/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$TAG"

            echo "üîÑ Actualizando imagen a $IMAGE..."
            az containerapp update \
              --name $ACA_KEYCLOAK_DEV \
              --resource-group $AZURE_RESOURCE_GROUP \
              --image $IMAGE \
              --min-replicas 1 \
              --set-env-vars KC_HOSTNAME=$KEYCLOAK_HOSTNAME \
                             KC_DB=dev-file \
                             KC_SPI_DB_LOCK_DEFAULT_PROVIDER=noop \
                             KC_CACHE=local \
                             KC_DB_URL='jdbc:h2:file:/opt/keycloak/data/h2/keycloakdb;MODE=MySQL;DATABASE_TO_UPPER=FALSE;NON_KEYWORDS=VALUE' \
                             KC_BOOTSTRAP_ADMIN_USERNAME=${{ secrets.KEYCLOAK_ADMIN }} \
                             KC_BOOTSTRAP_ADMIN_PASSWORD=${{ secrets.KEYCLOAK_ADMIN_PASSWORD }}

      # 8Ô∏è‚É£ (Opcional) Reiniciar para forzar nueva revisi√≥n
      - name: Restart revision
        uses: azure/cli@v1
        with:
          inlineScript: |
            REV=$(az containerapp show -g $AZURE_RESOURCE_GROUP -n $ACA_KEYCLOAK_DEV --query properties.latestReadyRevisionName -o tsv)
            [ -n "$REV" ] && az containerapp revision restart -g $AZURE_RESOURCE_GROUP -n $ACA_KEYCLOAK_DEV --revision "$REV"

      # 9Ô∏è‚É£ Health-check
      - name: Health Check Keycloak
        run: |
          URL="https://$KEYCLOAK_HOSTNAME/realms/obertibussoserviciosinmobiliarios/.well-known/openid-configuration"
          echo "ü©∫ Checking $URL"
          for i in $(seq 1 10); do
            HTTP=$(curl -sSf -w "%{http_code}" -o /dev/null "$URL") || HTTP=000
            if [ "$HTTP" -ge 200 ] && [ "$HTTP" -lt 300 ]; then
              echo "‚úÖ Keycloak healthy ($HTTP)"
              exit 0
            fi
            echo "‚è≥ Attempt $i failed (status $HTTP), retrying..."
            sleep 10
          done
          echo "‚ùå Health-check failed"; exit 1

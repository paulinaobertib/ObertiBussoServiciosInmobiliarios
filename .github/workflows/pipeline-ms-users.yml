name: CI/CD - MS Users

on:
  workflow_dispatch:
  # push:
  #   branches:
  #     - feature/pipeline

# --------------------------------------------------------------
# VARIABLES GLOBALES
# --------------------------------------------------------------
env:
  # Azure
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  ACA_ENVIRONMENT: ${{ secrets.ACA_ENVIRONMENT }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AZURE_BLOB_CONNECTION_STRING_DEV: ${{ secrets.AZURE_BLOB_CONNECTION_STRING_DEV }}
  AZURE_BLOB_CONNECTION_STRING_PROD: ${{ secrets.AZURE_BLOB_CONNECTION_STRING_PROD }}

  # Docker Hub
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  # Health-check
  HEALTH_PATH: /actuator/health

  # Properties-specific
  IMAGE_NAME: ms-users
  ACA_USERS_DEV: ${{ vars.ACA_USERS_DEV }}
  ACA_USERS_PROD: ${{ vars.ACA_USERS_PROD }}
  SERVICE_PORT: 8081

  # Utils
  DATASOURCE_URL_DEV: ${{ secrets.DATASOURCE_URL_DEV }}
  DATASOURCE_URL_PROD: ${{ secrets.DATASOURCE_URL_PROD }}
  DATASOURCE_USERNAME: ${{ secrets.DATASOURCE_USERNAME }}
  DATASOURCE_PASSWORD: ${{ secrets.DATASOURCE_PASSWORD }}
  EMAIL_USERNAME: ${{ secrets.EMAIL_USERNAME }}
  EMAIL_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
  # FRONTEND_BASE_URL:

jobs:
  # --------------------------------------------------------------
  # JOB 1: Build ¬∑ Test ¬∑ Docker
  # --------------------------------------------------------------
  build-and-push:
    name: Build ¬∑ Test ¬∑ Docker
    runs-on: ubuntu-latest
    environment: development

    outputs:
      tag: ${{ steps.build-image.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 24
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: "24"

      # - name: Run Backend Tests
      #   working-directory: backend/${{ env.IMAGE_NAME }}
      #   run: mvn -B test

      # - name: Publish JUnit Results
      #   uses: EnricoMi/publish-unit-test-result-action@v2
      #   if: always()
      #   with:
      #     files: backend/${{ env.IMAGE_NAME }}/target/surefire-reports/*.xml

      # - name: Test Summary
      #   uses: test-summary/action@v2
      #   if: always()
      #   with:
      #     paths: backend/${{ env.IMAGE_NAME }}/target/surefire-reports/*.xml

      # - name: Publish JaCoCo Coverage
      #   uses: PavanMudigonda/jacoco-reporter@v5.0
      #   with:
      #     coverage_results_path: backend/${{ env.IMAGE_NAME }}/target/site/jacoco/jacoco.xml
      #     coverage_report_name: Code Coverage
      #     coverage_report_title: "üìà JaCoCo Coverage"
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     minimum_coverage: 80
      #     publish_only_summary: true

      - name: Build & Package JAR
        working-directory: backend/${{ env.IMAGE_NAME }}
        run: mvn -B package -DskipTests

      - name: Upload Backend JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}-jar
          path: backend/${{ env.IMAGE_NAME }}/target/*.jar

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker Image
        id: build-image
        run: |
          TAG=${GITHUB_SHA::8}
          IMAGE="docker.io/${{env.DOCKERHUB_USERNAME}}/${{ env.IMAGE_NAME }}:$TAG"
          docker build -t $IMAGE -f backend/${{ env.IMAGE_NAME }}/Dockerfile backend/${{ env.IMAGE_NAME }}
          docker push $IMAGE
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  # --------------------------------------------------------------
  # JOB 2: Deploy to Development
  # --------------------------------------------------------------
  deploy-dev:
    name: Deploy to Development
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Ensure Container App Exists
        uses: azure/cli@v1
        with:
          azcliversion: latest
          inlineScript: |
            set -e
            TAG=${{ needs.build-and-push.outputs.tag }}
            IMAGE="docker.io/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$TAG"

            if ! az containerapp show -g $AZURE_RESOURCE_GROUP -n $ACA_USERS_DEV &>/dev/null; then
              echo "üöÄ Creating $ACA_USERS_DEV..."
              az containerapp create \
                -g $AZURE_RESOURCE_GROUP \
                -n $ACA_USERS_DEV \
                --environment $ACA_ENVIRONMENT \
                --image $IMAGE \
                --ingress external \
                --target-port $SERVICE_PORT \
                --registry-server docker.io \
                --registry-username $DOCKERHUB_USERNAME \
                --registry-password $DOCKERHUB_TOKEN \
                --cpu 0.25 \
                --memory 0.5Gi
            else
              echo "‚úèÔ∏è $ACA_USERS_DEV already exists."
            fi

      - name: Ensure Container App Is Running
        uses: azure/powershell@v1
        with:
          azPSVersion: latest
          inlineScript: |
            # Leemos el estado actual
            $status = (az containerapp show `
              --resource-group $Env:AZURE_RESOURCE_GROUP `
              --name $Env:ACA_USERS_DEV `
              --query properties.runningStatus `
              -o tsv).Trim()
            Write-Host "Current runningStatus (via CLI): $status"

            if ($status -ne 'Running') {
              Write-Host "üîÑ Starting Container App via Start-AzContainerApp..."
              Start-AzContainerApp `
                -Name $Env:ACA_USERS_DEV `
                -ResourceGroupName $Env:AZURE_RESOURCE_GROUP `
                -SubscriptionId $Env:AZURE_SUBSCRIPTION_ID
            }
            else {
              Write-Host "‚úÖ Container App is already Running."
            }

      - name: Fetch FQDNs
        uses: azure/cli@v1
        with:
          azcliversion: latest
          inlineScript: |
            FQDN=$(az containerapp show \
              -g ${{ env.AZURE_RESOURCE_GROUP }} \
              -n ${{ vars.ACA_EUREKA_DEV }} \
              --query properties.configuration.ingress.fqdn -o tsv)
            echo "üîñ Eureka FQDN: $FQDN"
            # Lo subimos a GitHub Env para todo el job
            echo "EUREKA_HOSTNAME=$FQDN"    >> $GITHUB_ENV

            FQDN=$(az containerapp show \
              -g ${{ env.AZURE_RESOURCE_GROUP }} \
              -n ${{ vars.ACA_KEYCLOAK_DEV }} \
              --query properties.configuration.ingress.fqdn -o tsv)
            echo "üîñ Keycloak FQDN: $FQDN"
            echo "KEYCLOAK_HOSTNAME=$FQDN" >> $GITHUB_ENV

            FQDN=$(az containerapp show \
              -g ${{ env.AZURE_RESOURCE_GROUP }} \
              -n ${{ vars.ACA_USERS_DEV }} \
              --query properties.configuration.ingress.fqdn -o tsv)
            echo "üîñ Users FQDN: $FQDN"
            echo "USERS_HOSTNAME=$FQDN" >> $GITHUB_ENV

      - name: Update Image & Scale
        uses: azure/cli@v1
        with:
          azcliversion: latest
          inlineScript: |
            set -e
            TAG=${{ needs.build-and-push.outputs.tag }}
            IMAGE="docker.io/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$TAG"

            echo "üîÑ Updating image to $IMAGE and setting min-replicas=1..."
            az containerapp update \
              -g $AZURE_RESOURCE_GROUP \
              -n $ACA_USERS_DEV \
              --image $IMAGE \
              --min-replicas 1 \
              --set-env-vars \
                EUREKA_HOSTNAME=$EUREKA_HOSTNAME \
                KEYCLOAK_HOSTNAME=$KEYCLOAK_HOSTNAME \
                SERVICE_PORT=$SERVICE_PORT \
                DATASOURCE_URL=$DATASOURCE_URL_DEV \
                DATASOURCE_USERNAME=$DATASOURCE_USERNAME \
                DATASOURCE_PASSWORD=$DATASOURCE_PASSWORD \
                EMAIL_USERNAME="$EMAIL_USERNAME" \
                EMAIL_PASSWORD="$EMAIL_PASSWORD" \
                KEYCLOAK_SB_CLIENT_ID=${{ vars.KEYCLOAK_SB_CLIENT_ID }} \
                KEYCLOAK_SB_CLIENT_SECRET=${{ vars.KEYCLOAK_SB_CLIENT_SECRET }} \

      - name: Restart to apply Changes
        uses: azure/cli@v1
        with:
          azcliversion: latest
          inlineScript: |
            set -e
            # Obtenemos la √∫ltima revisi√≥n lista (lista y lista de nuevo)
            REVISION=$(az containerapp show \
              -g $AZURE_RESOURCE_GROUP \
              -n $ACA_USERS_DEV \
              --query properties.latestReadyRevisionName \
              -o tsv)

            if [[ -n "$REVISION" ]]; then
              echo "üîÑ Restarting revision $REVISION..."
              az containerapp revision restart \
                -g $AZURE_RESOURCE_GROUP \
                -n $ACA_USERS_DEV \
                --revision "$REVISION"
            else
              echo "‚ÑπÔ∏è No ready revision found, skipping restart."
            fi

      - name: Health Check with Retries
        run: |
          URL="https://$USERS_HOSTNAME${HEALTH_PATH}"
          echo "ü©∫ Checking health at $URL"
          for i in $(seq 1 10); do
            HTTP=$(curl --silent --show-error --fail \
                         --connect-timeout 10 \
                         --max-time 20 \
                         -w "%{http_code}" \
                         -o /dev/null \
                         $URL) || true
            if [[ "$HTTP" -ge 200 && "$HTTP" -lt 300 ]]; then
              echo "‚úÖ MS Users is healthy (status $HTTP)"
              exit 0
            fi
            echo "‚è≥ Attempt $i failed (status $HTTP), retrying in 10s..."
            sleep 10
          done
          echo "‚ùå Health check failed after 10 attempts"
          exit 1

  # --------------------------------------------------------------
  # JOB 3: Deploy to Production
  # --------------------------------------------------------------
  deploy-prod:
    name: Deploy to Production
    needs: [deploy-dev, build-and-push]
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Ensure Container App Exists
        uses: azure/cli@v1
        with:
          azcliversion: latest
          inlineScript: |
            set -e
            TAG=${{ needs.build-and-push.outputs.tag }}
            IMAGE="docker.io/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$TAG"

            if ! az containerapp show -g $AZURE_RESOURCE_GROUP -n $ACA_USERS_PROD &>/dev/null; then
              echo "üöÄ Creating $ACA_USERS_PROD..."
              az containerapp create \
                -g $AZURE_RESOURCE_GROUP \
                -n $ACA_USERS_PROD \
                --environment $ACA_ENVIRONMENT \
                --image $IMAGE \
                --ingress external \
                --target-port $SERVICE_PORT \
                --registry-server docker.io \
                --registry-username $DOCKERHUB_USERNAME \
                --registry-password $DOCKERHUB_TOKEN \
                --cpu 0.25 \
                --memory 0.5Gi
            else
              echo "‚úèÔ∏è $ACA_USERS_PROD already exists."
            fi

      - name: Ensure Container App Is Running
        uses: azure/powershell@v1
        with:
          azPSVersion: latest
          inlineScript: |
            # Leemos el estado actual
            $status = (az containerapp show `
              --resource-group $Env:AZURE_RESOURCE_GROUP `
              --name $Env:ACA_USERS_PROD `
              --query properties.runningStatus `
              -o tsv).Trim()
            Write-Host "Current runningStatus (via CLI): $status"

            if ($status -ne 'Running') {
              Write-Host "üîÑ Starting Container App via Start-AzContainerApp..."
              Start-AzContainerApp `
                -Name $Env:ACA_USERS_PROD `
                -ResourceGroupName $Env:AZURE_RESOURCE_GROUP `
                -SubscriptionId $Env:AZURE_SUBSCRIPTION_ID
            }
            else {
              Write-Host "‚úÖ Container App is already Running."
            }

      - name: Fetch Eureka FQDN
        uses: azure/cli@v1
        with:
          azcliversion: latest
          inlineScript: |
            FQDN=$(az containerapp show \
              -g ${{ env.AZURE_RESOURCE_GROUP }} \
              -n ${{ vars.ACA_EUREKA_PROD }} \
              --query properties.configuration.ingress.fqdn -o tsv)
            echo "üîñ Eureka FQDN: $FQDN"
            # Lo subimos a GitHub Env para todo el job
            echo "EUREKA_HOSTNAME=$FQDN"    >> $GITHUB_ENV

            FQDN=$(az containerapp show \
              -g ${{ env.AZURE_RESOURCE_GROUP }} \
              -n ${{ vars.ACA_KEYCLOAK_DEV }} \
              --query properties.configuration.ingress.fqdn -o tsv)
            echo "üîñ Keycloak FQDN: $FQDN"
            echo "KEYCLOAK_HOSTNAME=$FQDN" >> $GITHUB_ENV

            FQDN=$(az containerapp show \
              -g ${{ env.AZURE_RESOURCE_GROUP }} \
              -n ${{ vars.ACA_USERS_PROD }} \
              --query properties.configuration.ingress.fqdn -o tsv)
            echo "üîñ Properties FQDN: $FQDN"
            echo "USERS_HOSTNAME=$FQDN" >> $GITHUB_ENV

      - name: Update Image & Scale
        uses: azure/cli@v1
        with:
          azcliversion: latest
          inlineScript: |
            set -e
            TAG=${{ needs.build-and-push.outputs.tag }}
            IMAGE="docker.io/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$TAG"

            echo "üîÑ Updating image to $IMAGE and setting min-replicas=1..."
            az containerapp update \
              -g $AZURE_RESOURCE_GROUP \
              -n $ACA_USERS_PROD \
              --image $IMAGE \
              --min-replicas 1 \
              --set-env-vars \
                EUREKA_HOSTNAME=$FQDN \
                KEYCLOAK_HOSTNAME=$KEYCLOAK_HOSTNAME \
                SERVICE_PORT=$SERVICE_PORT \
                DATASOURCE_URL=$DATASOURCE_URL_PROD \
                DATASOURCE_USERNAME=$DATASOURCE_USERNAME \
                DATASOURCE_PASSWORD=$DATASOURCE_PASSWORD \
                KEYCLOAK_SB_CLIENT_ID=${{ vars.KEYCLOAK_SB_CLIENT_ID }} \
                KEYCLOAK_SB_CLIENT_SECRET=${{ vars.KEYCLOAK_SB_CLIENT_SECRET }} \

      - name: Restart to apply Changes
        uses: azure/cli@v1
        with:
          azcliversion: latest
          inlineScript: |
            set -e
            # Obtenemos la √∫ltima revisi√≥n lista (lista y lista de nuevo)
            REVISION=$(az containerapp show \
              -g $AZURE_RESOURCE_GROUP \
              -n $ACA_USERS_PROD \
              --query properties.latestReadyRevisionName \
              -o tsv)

            if [[ -n "$REVISION" ]]; then
              echo "üîÑ Restarting revision $REVISION..."
              az containerapp revision restart \
                -g $AZURE_RESOURCE_GROUP \
                -n $ACA_USERS_PROD \
                --revision "$REVISION"
            else
              echo "‚ÑπÔ∏è No ready revision found, skipping restart."
            fi

      - name: Health Check with Retries
        run: |
          URL="https://$USERS_HOSTNAME${HEALTH_PATH}"
          echo "ü©∫ Checking health at $URL"
          for i in $(seq 1 10); do
            HTTP=$(curl --silent --show-error --fail \
                         --connect-timeout 10 \
                         --max-time 20 \
                         -w "%{http_code}" \
                         -o /dev/null \
                         $URL) || true
            if [[ "$HTTP" -ge 200 && "$HTTP" -lt 300 ]]; then
              echo "‚úÖ MS Users is healthy (status $HTTP)"
              exit 0
            fi
            echo "‚è≥ Attempt $i failed (status $HTTP), retrying in 10s..."
            sleep 10
          done
          echo "‚ùå Health check failed after 10 attempts"
          exit 1

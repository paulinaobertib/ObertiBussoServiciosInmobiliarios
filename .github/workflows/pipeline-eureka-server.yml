name: CI/CD - Eureka Server

on:
  push:
    branches: [feature/pipeline]
  workflow_dispatch:

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 1) VARIABLES GLOBALES
# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
env:
  # Azure
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  ACA_ENVIRONMENT: ${{ secrets.ACA_ENVIRONMENT }}

  # Docker Hub
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
  DOCKERHUB_REGISTRY: docker.io/${{ secrets.DOCKERHUB_USERNAME }}

  # Health-check
  HEALTH_PATH: /actuator/health
  HEALTH_TIMEOUT: 60

  # Eureka-specific
  IMAGE_NAME: eureka-server
  CONTAINERAPP_NAME: aca-eureka-server
  SERVICE_PORT: 8761

jobs:
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  # JOB 1: Build ¬∑ Test ¬∑ Package ¬∑ Docker
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  build-and-push:
    name: Build ¬∑ Test ¬∑ Package ¬∑ Push Docker
    runs-on: ubuntu-latest
    environment: development

    outputs:
      tag: ${{ steps.build-image.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 24
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: "24"

      # - name: Run Backend Tests
      #   working-directory: backend/${{ env.IMAGE_NAME }}
      #   run: mvn -B test

      # - name: Publish JUnit Results
      #   uses: EnricoMi/publish-unit-test-result-action@v2
      #   if: always()
      #   with:
      #     files: backend/${{ env.IMAGE_NAME }}/target/surefire-reports/*.xml

      # - name: Test Summary
      #   uses: test-summary/action@v2
      #   if: always()
      #   with:
      #     paths: backend/${{ env.IMAGE_NAME }}/target/surefire-reports/*.xml

      # - name: Publish JaCoCo Coverage
      #   uses: PavanMudigonda/jacoco-reporter@v5.0
      #   with:
      #     coverage_results_path: backend/${{ env.IMAGE_NAME }}/target/site/jacoco/jacoco.xml
      #     coverage_report_name: Code Coverage
      #     coverage_report_title: "üìà JaCoCo Coverage"
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     minimum_coverage: 80
      #     publish_only_summary: true

      - name: Build & Package JAR
        working-directory: backend/${{ env.IMAGE_NAME }}
        run: mvn -B package -DskipTests

      - name: Upload Backend JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}-jar
          path: backend/${{ env.IMAGE_NAME }}/target/*.jar

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.DOCKERHUB_REGISTRY }}
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker Image
        id: build-image
        run: |
          TAG=${GITHUB_SHA::8}
          IMAGE="${{ env.DOCKERHUB_REGISTRY }}/${{ env.IMAGE_NAME }}:$TAG"
          docker build -t $IMAGE -f backend/${{ env.IMAGE_NAME }}/Dockerfile backend/${{ env.IMAGE_NAME }}
          docker push $IMAGE
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  # JOB 2: Deploy to Development
  # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
  deploy-dev:
    name: Deploy to Development
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - name: Deploy Eureka Container App
        uses: azure/cli@v1
        with:
          azcliversion: latest
          inlineScript: |
            set -e

            # 1) Tag e imagen
            TAG=${{ needs.build-and-push.outputs.tag }}
            IMAGE="${{ env.DOCKERHUB_REGISTRY }}/${{ env.IMAGE_NAME }}:$TAG"

            # 2) Crear si no existe
            if ! az containerapp show -g $AZURE_RESOURCE_GROUP -n $CONTAINERAPP_NAME &>/dev/null; then
              echo "üöÄ Creating $CONTAINERAPP_NAME..."
              az containerapp create \
                -g $AZURE_RESOURCE_GROUP \
                -n $CONTAINERAPP_NAME \
                --environment $ACA_ENVIRONMENT \
                --image $IMAGE \
                --ingress external \
                --target-port $SERVICE_PORT \
                --registry-server docker.io \
                --registry-username $DOCKERHUB_USERNAME \
                --registry-password $DOCKERHUB_TOKEN \
                --cpu 0.25 \
                --memory 0.5Gi
            else
              echo "‚úèÔ∏è $CONTAINERAPP_NAME already exists."
            fi

            # 3) Obtener FQDN y actualizar imagen/env-vars
            FQDN=$(az containerapp show \
                     -g $AZURE_RESOURCE_GROUP \
                     -n $CONTAINERAPP_NAME \
                     --query properties.configuration.ingress.fqdn \
                     -o tsv)
            echo "üåê FQDN: $FQDN"
            echo "EUREKA_FQDN=$FQDN" >> $GITHUB_ENV

            az containerapp update \
              -g $AZURE_RESOURCE_GROUP \
              -n $CONTAINERAPP_NAME \
              --image $IMAGE \
              --min-replicas 1 \
              --set-env-vars EUREKA_HOSTNAME=$FQDN

            # 4) Reiniciar la revisi√≥n activa (despierta la app si estaba a cero)
            REVISION=$(az containerapp revision list \
                         -g $AZURE_RESOURCE_GROUP \
                         -n $CONTAINERAPP_NAME \
                         --query "[?properties.activeRevisionsMode=='Single'].name | [0]" \
                         -o tsv)
            if [ -n "$REVISION" ]; then
              echo "üîÑ Restarting revision $REVISION to wake up the app..."
              az containerapp revision restart \
                -g $AZURE_RESOURCE_GROUP \
                -n $CONTAINERAPP_NAME \
                --revision $REVISION
            fi

      - name: Health Check with Retries
        run: |
          URL="https://$EUREKA_FQDN${{ env.HEALTH_PATH }}"
          echo "ü©∫ Checking health at $URL"
          for i in $(seq 1 10); do
            HTTP=$(curl -s -o /dev/null -w "%{http_code}" $URL) || true
            if [[ "$HTTP" -ge 200 && "$HTTP" -lt 300 ]]; then
              echo "‚úÖ Eureka Server is healthy (status $HTTP)"
              exit 0
            fi
            echo "‚è≥ Attempt $i failed (status $HTTP), retrying in 10s..."
            sleep 10
          done
          echo "‚ùå Health check failed after 10 attempts"
          exit 1

name: CI/CD - Eureka Server

# 1) Lo que dice esto es, se dispara al hacer push en estas branches O de forma manual desde Actions
on:
  push:
    branches:
      - feature/pipeline
    #   - main
  workflow_dispatch:

# 2) Variables de entorno comunes que funcionan de manera global, de esta manera no me hace falta definirlas por environment
env:
  RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}
  DOCKERHUB_REGISTRY: docker.io/tomicassanelli
  #   Cuando pase de usar DockerHub a ACR, lo que tengo que cambiar es a
  # ACR_LOGIN_SERVER: ${{ secrets.ACR_NAME }}.azurecr.io
  IMAGE_NAME: eureka-server
  ACA_EUREKASERVER_DEV: aca-eureka-server
  HEALTH_PATH: /actuator/health
  HEALTH_TIMEOUT: 60

jobs:
  build-and-push:
    name: Build, Test, Publish Artifact & Push Container
    runs-on: ubuntu-latest
    environment: development

    outputs:
      tag: ${{ steps.build.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 24
        uses: actions/setup-java@v3
        with:
          distribution: "temurin"
          java-version: "24"

      - name: Build con Maven (genera .jar)
        run: |
          cd backend/eureka-server
          mvn -B clean package

      - name: Publicar .jar como artifact
        uses: actions/upload-artifact@v4
        with:
          name: eureka-server-jar
          path: backend/eureka-server/target/*.jar

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          registry: docker.io
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push Docker Image
        id: build
        run: |
          TAG=${GITHUB_SHA::8}
          IMAGE=$DOCKERHUB_REGISTRY/$IMAGE_NAME:$TAG
          docker build -t $IMAGE -f backend/eureka-server/Dockerfile backend/eureka-server
          docker push $IMAGE
          echo "tag=$TAG" >> $GITHUB_OUTPUT

  deploy-dev:
    name: Deploy to Development
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to ACA (DEV)
        run: |
          TAG=${{ needs.build-and-push.outputs.tag }}
          IMAGE=$DOCKERHUB_REGISTRY/$IMAGE_NAME:$TAG
          echo "Deploying image: $IMAGE"

          echo "üîç Obteniendo FQDN..."
          FQDN=$(az containerapp show \
            --name $ACA_EUREKASERVER_DEV \
            --resource-group $RESOURCE_GROUP \
            --query properties.configuration.ingress.fqdn -o tsv)

          echo "üåê FQDN: $FQDN"

          az containerapp update \
            --name $ACA_EUREKASERVER_DEV \
            --resource-group $RESOURCE_GROUP \
            --image $IMAGE \
            --target-port 8761 \
            --set-env-vars EUREKA_HOSTNAME=$FQDN

      - name: Health check
        run: |
          FQDN=$(az containerapp show --name $ACA_EUREKASERVER_DEV \
                  --resource-group $RESOURCE_GROUP \
                  --query properties.configuration.ingress.fqdn -o tsv)

          URL="https://$FQDN$HEALTH_PATH"
          echo "ü©∫ Checking health at $URL"
          HTTP=$(curl --max-time $HEALTH_TIMEOUT -s -o /dev/null -w "%{http_code}" $URL)
          echo "HTTP status: $HTTP"
          if [[ "$HTTP" -ge 200 && "$HTTP" -lt 300 ]]; then
            echo "‚úÖ Eureka Server is healthy"
          else
            echo "‚ùå Health check failed with status $HTTP"
            exit 1
          fi

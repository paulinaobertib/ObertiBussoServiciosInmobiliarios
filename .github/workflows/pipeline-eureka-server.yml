name: CI/CD - Eureka Server

on:
  workflow_dispatch:
  push:
    branches:
      - feature/pipeline

# --------------------------------------------------------------
# VARIABLES GLOBALES
# --------------------------------------------------------------
env:
  # Azure
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}

  # Docker Hub
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}

  # Health-check
  HEALTH_PATH: /actuator/health

  # Eureka-specific
  IMAGE_NAME: eureka-server
  APP_EUREKA_DEV: ${{ vars.APP_EUREKA_DEV }}
  APP_EUREKA_PROD: ${{ vars.APP_EUREKA_PROD }}
  EUREKA_HOSTNAME: ${{ vars.APP_EUREKA_DEV }}.azurewebsites.net

  SERVICE_PORT: 8761

jobs:
  # --------------------------------------------------------------
  # JOB 1: Build ¬∑ Test ¬∑ Docker
  # --------------------------------------------------------------
  build-and-push:
    name: Build ¬∑ Test ¬∑ Docker
    runs-on: ubuntu-latest

    outputs:
      tag: ${{ steps.build-image.outputs.tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 24
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: "24"

      # - name: Run Backend Tests
      #   working-directory: backend/${{ env.IMAGE_NAME }}
      #   run: mvn -B test

      # - name: Publish JUnit Results
      #   uses: EnricoMi/publish-unit-test-result-action@v2
      #   if: always()
      #   with:
      #     files: backend/${{ env.IMAGE_NAME }}/target/surefire-reports/*.xml

      # - name: Test Summary
      #   uses: test-summary/action@v2
      #   if: always()
      #   with:
      #     paths: backend/${{ env.IMAGE_NAME }}/target/surefire-reports/*.xml

      # - name: Publish JaCoCo Coverage
      #   uses: PavanMudigonda/jacoco-reporter@v5.0
      #   with:
      #     coverage_results_path: backend/${{ env.IMAGE_NAME }}/target/site/jacoco/jacoco.xml
      #     coverage_report_name: Code Coverage
      #     coverage_report_title: "üìà JaCoCo Coverage"
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     minimum_coverage: 80
      #     publish_only_summary: true

      - name: Build & Package JAR
        working-directory: backend/${{ env.IMAGE_NAME }}
        run: mvn -B package -DskipTests

      - name: Upload Backend JAR Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.IMAGE_NAME }}-jar
          path: backend/${{ env.IMAGE_NAME }}/target/*.jar

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Set Docker image tag
        id: set-tag
        run: |
          TAG=${GITHUB_SHA::8}
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build & Push Docker image
        run: |
          TAG=${{ steps.set-tag.outputs.tag }}
          IMAGE="docker.io/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:$TAG"
          docker build -t $IMAGE -f backend/${{ env.IMAGE_NAME }}/Dockerfile backend/${{ env.IMAGE_NAME }}
          docker push $IMAGE

  # --------------------------------------------------------------
  # JOB 2: Deploy to Development
  # --------------------------------------------------------------
  deploy-dev:
    name: Deploy to Development
    needs: build-and-push
    runs-on: ubuntu-latest
    environment: development

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}
          enable-AzPSSession: true

      - name: Set variables
        id: vars
        run: |
          echo "IMAGE=docker.io/${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push.outputs.tag }}" >> $GITHUB_ENV

      - name: Create Web App (if not exists)
        run: |
          az webapp create \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --plan ${{ secrets.APP_SERVICE_PLAN }} \
            --name ${{ env.APP_EUREKA_DEV }} \
            --deployment-container-image-name $IMAGE || true

      - name: Ensure App Service Is Running
        run: |
          echo "Verificando estado del App Service..."
          status=$(az webapp show \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --name ${{ env.APP_EUREKA_DEV }} \
            --query state -o tsv)
          echo "Estado actual: $status"
          if [ "$status" != "Running" ]; then
            echo "üîÑ Iniciando App Service..."
            az webapp start \
              --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
              --name ${{ env.APP_EUREKA_DEV }}
          else
            echo "‚úÖ App Service ya est√° en ejecuci√≥n."
          fi

      - name: Configure Web App container
        run: |
          az webapp config container set \
            --name ${{ env.APP_EUREKA_DEV }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --docker-custom-image-name $IMAGE \
            --docker-registry-server-url https://index.docker.io \
            --docker-registry-server-user ${{ env.DOCKERHUB_USERNAME }} \
            --docker-registry-server-password ${{ env.DOCKERHUB_TOKEN }}

      - name: Set environment variables (app settings)
        run: |
          az webapp config appsettings set \
            --name ${{ env.APP_EUREKA_DEV }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --settings SERVICE_PORT=${{ env.SERVICE_PORT }} \
                       WEBSITES_PORT=${{ env.SERVICE_PORT }} \
                       EUREKA_HOSTNAME=${{ env.EUREKA_HOSTNAME }}

      - name: Health Check with Retries
        run: |
          URL="http://$EUREKA_HOSTNAME${HEALTH_PATH}"
          echo "ü©∫ Checking health at $URL"
          for i in $(seq 1 10); do
            HTTP=$(curl --silent --show-error --fail \
                         --connect-timeout 10 \
                         --max-time 20 \
                         -w "%{http_code}" \
                         -o /dev/null \
                         $URL) || true
            if [[ "$HTTP" -ge 200 && "$HTTP" -lt 300 ]]; then
              echo "‚úÖ Eureka Server is healthy (status $HTTP)"
              exit 0
            fi
            echo "‚è≥ Attempt $i failed (status $HTTP), retrying in 10s..."
            sleep 10
          done
          echo "‚ùå Health check failed after 10 attempts"
          exit 1

  # --------------------------------------------------------------
  # JOB 3: Deploy to Production
  # --------------------------------------------------------------
  # deploy-prod:
  #   name: Deploy to Production
  #   needs: [deploy-dev, build-and-push]
  #   runs-on: ubuntu-latest
  #   environment: production

  #   steps:

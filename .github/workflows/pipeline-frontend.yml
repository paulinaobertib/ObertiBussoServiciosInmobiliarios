name: CI/CD - Frontend

on:
  workflow_dispatch:
  push:
    branches:
      - feature/pipeline

# --------------------------------------------------------------
# VARIABLES GLOBALES
# --------------------------------------------------------------
env:
  # Azure
  AZURE_CREDENTIALS: ${{ secrets.AZURE_CREDENTIALS }}
  AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  AZURE_RESOURCE_GROUP: ${{ secrets.AZURE_RESOURCE_GROUP }}

  # Properties-specific
  SWA_LOCATION: westus2
  SWA_FRONTEND_DEV: ${{ vars.SWA_FRONTEND_DEV }}
  SWA_FRONTEND_PROD: ${{ vars.SWA_FRONTEND_PROD }}

  # Utils
  API_URL_DEV: "https://${{ vars.ACA_PROPERTIES_DEV }}/api"
  BASE_URL_DEV: "https://${{ vars.SWA_FRONTEND_DEV }}.azurestaticapps.net"
  API_URL_PROD: "https://${{ vars.ACA_PROPERTIES_PROD }}/api"
  BASE_URL_PROD: "https://${{ vars.SWA_FRONTEND_PROD }}.azurestaticapps.net"

jobs:
  # --------------------------------------------------------------
  # JOB 1: Build · Test
  # --------------------------------------------------------------
  build-and-push:
    name: Build · Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "22"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      # - name: Lint
      #   working-directory: ./frontend
      #   run: npm run lint

      # - name: Run Unit Tests
      #   working-directory: ./frontend
      #   run: npm test # Ajusta este comando según tu script de pruebas definido en package.json

      # - name: Upload test report (opcional)
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: test-report
      #     path: frontend/test-results # Ajusta ruta si tus tests generan reportes en otro directorio

      - name: Build
        working-directory: ./frontend
        env:
          VITE_API_URL: "__API_URL_PLACEHOLDER__"
          VITE_BASE_URL: "__BASE_URL_PLACEHOLDER__"
          CI: "true"
        run: npm run build -- --mode production

      - name: Copy staticwebapp.config.json to dist
        run: |
          cp frontend/staticwebapp.config.json frontend/dist/

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

  # --------------------------------------------------------------
  # JOB 2: Deploy to Development
  # --------------------------------------------------------------
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: build-and-push
    environment: development

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - name: Ensure Static Web App Exists
        run: |
          if ! az staticwebapp show -g "$AZURE_RESOURCE_GROUP" -n "$SWA_FRONTEND_DEV" &>/dev/null; then
            echo "🚀 Creating $SWA_FRONTEND_DEV..."
            az staticwebapp create \
              -g "$AZURE_RESOURCE_GROUP" \
              -n "${{ vars.SWA_FRONTEND_DEV }}" \
              --location "$SWA_LOCATION" \
              --app-location frontend \
              --output-location frontend/dist \
              --sku Free
          else
            echo "✏️ $SWA_FRONTEND_DEV already exists."
          fi

      - name: Fetch FQDNs
        uses: azure/cli@v1
        with:
          azcliversion: latest
          inlineScript: |
            FQDN=$(az containerapp show \
              -g ${{ env.AZURE_RESOURCE_GROUP }} \
              -n ${{ vars.ACA_PROPERTIES_DEV }} \
              --query properties.configuration.ingress.fqdn -o tsv)
            echo "🔖 Properties FQDN: $FQDN"
            echo "PROPERTIES_HOSTNAME=$FQDN" >> $GITHUB_ENV

            FQDN=$(az containerapp show \
              -g ${{ env.AZURE_RESOURCE_GROUP }} \
              -n ${{ vars.ACA_USERS_DEV }} \
              --query properties.configuration.ingress.fqdn -o tsv)
            echo "🔖 Users FQDN: $FQDN"
            echo "USERS_HOSTNAME=$FQDN" >> $GITHUB_ENV

            FQDN=$(az staticwebapp show \
              -g ${{ env.AZURE_RESOURCE_GROUP }} \
              -n "${{ vars.SWA_FRONTEND_DEV }}" \
              --query defaultHostname -o tsv)
            echo "🔖 Frontend FQDN: $FQDN"
            echo "FRONTEND_HOSTNAME=$FQDN" >> $GITHUB_ENV

      - name: Insert DEV URLs
        shell: bash
        run: |
          URL="https://${PROPERTIES_HOSTNAME}/api"
          VITE_API_URL_DEV=${URL//\//\\/}

          URL="https://${FRONTEND_HOSTNAME}"
          VITE_BASE_URL_DEV=${URL//\//\\/}

          echo "API URL: $VITE_API_URL_DEV"
          echo "BASE URL: $VITE_BASE_URL_DEV"

          find frontend/dist -type f -name '*.js' -exec \
            sed -i "s#__API_URL_PLACEHOLDER__#$VITE_API_URL_DEV#g"   {} +
          find frontend/dist -type f -name '*.js' -exec \
            sed -i "s#__BASE_URL_PLACEHOLDER__#$VITE_BASE_URL_DEV#g" {} +

      - name: Install SWA CLI
        run: npm install -g @azure/static-web-apps-cli@latest

      - name: Deploy to SWA
        run: |
          DEPLOY_TOKEN=$(az staticwebapp secrets list \
            --name "$SWA_FRONTEND_DEV" \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --query properties.apiKey -o tsv)
          swa deploy frontend/dist \
            --app-name "$SWA_FRONTEND_DEV" \
            --env production \
            --deployment-token "$DEPLOY_TOKEN"

      - name: Health Check
        run: |
          URL="https://${FRONTEND_HOSTNAME}"
          echo "🩺 Checking health at $URL"
          for i in $(seq 1 10); do
            HTTP=$(curl --silent --show-error --fail \
                         --connect-timeout 10 \
                         --max-time 20 \
                         -w "%{http_code}" \
                         -o /dev/null \
                         $URL) || true
            if [[ "$HTTP" -ge 200 && "$HTTP" -lt 300 ]]; then
              echo "✅ MS Users is healthy (status $HTTP)"
              exit 0
            fi
            echo "⏳ Attempt $i failed (status $HTTP), retrying in 10s..."
            sleep 10
          done
          echo "❌ Health check failed after 10 attempts"
          exit 1

  # --------------------------------------------------------------
  # JOB 3: Deploy to Production
  # --------------------------------------------------------------

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-dev, build-and-push]
    environment: production

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ env.AZURE_CREDENTIALS }}

      - name: Ensure Static Web App Exists
        run: |
          if ! az staticwebapp show -g "$AZURE_RESOURCE_GROUP" -n "$SWA_FRONTEND_PROD" &>/dev/null; then
            echo "🚀 Creating $SWA_FRONTEND_PROD..."
            az staticwebapp create \
              -g "$AZURE_RESOURCE_GROUP" \
              -n "${{ vars.SWA_FRONTEND_PROD }}" \
              --location "$SWA_LOCATION" \
              --app-location frontend \
              --output-location frontend/dist \
              --sku Free
          else
            echo "✏️ $SWA_FRONTEND_PROD already exists."
          fi

      - name: Fetch FQDNs
        uses: azure/cli@v1
        with:
          azcliversion: latest
          inlineScript: |
            FQDN=$(az containerapp show \
              -g ${{ env.AZURE_RESOURCE_GROUP }} \
              -n ${{ vars.ACA_PROPERTIES_PROD }} \
              --query properties.configuration.ingress.fqdn -o tsv)
            echo "🔖 Properties FQDN: $FQDN"
            echo "PROPERTIES_HOSTNAME=$FQDN" >> $GITHUB_ENV

            FQDN=$(az containerapp show \
              -g ${{ env.AZURE_RESOURCE_GROUP }} \
              -n ${{ vars.ACA_USERS_PROD }} \
              --query properties.configuration.ingress.fqdn -o tsv)
            echo "🔖 Users FQDN: $FQDN"
            echo "USERS_HOSTNAME=$FQDN" >> $GITHUB_ENV

            FQDN=$(az staticwebapp show \
              -g ${{ env.AZURE_RESOURCE_GROUP }} \
              -n "${{ vars.SWA_FRONTEND_PROD }}" \
              --query defaultHostname -o tsv)
            echo "🔖 Frontend FQDN: $FQDN"
            echo "FRONTEND_HOSTNAME=$FQDN" >> $GITHUB_ENV

      - name: Insert PROD URLs
        shell: bash
        run: |
          URL="https://${PROPERTIES_HOSTNAME}/api"
          VITE_API_URL_PROD=${URL//\//\\/}

          URL="https://${FRONTEND_HOSTNAME}"
          VITE_BASE_URL_PROD=${URL//\//\\/}

          echo "API URL: $VITE_API_URL_PROD"
          echo "BASE URL: $VITE_BASE_URL_PROD"

          find frontend/dist -type f -name '*.js' -exec \
            sed -i "s#__API_URL_PLACEHOLDER__#$VITE_API_URL_PROD#g"   {} +
          find frontend/dist -type f -name '*.js' -exec \
            sed -i "s#__BASE_URL_PLACEHOLDER__#$VITE_BASE_URL_PROD#g" {} +

      - name: Install SWA CLI
        run: npm install -g @azure/static-web-apps-cli@latest

      - name: Deploy to SWA
        run: |
          DEPLOY_TOKEN=$(az staticwebapp secrets list \
            --name "$SWA_FRONTEND_PROD" \
            --resource-group "$AZURE_RESOURCE_GROUP" \
            --query properties.apiKey -o tsv)
          swa deploy frontend/dist \
            --app-name "$SWA_FRONTEND_PROD" \
            --env production \
            --deployment-token "$DEPLOY_TOKEN"

      - name: Health Check
        run: |
          URL="https://${FRONTEND_HOSTNAME}"
          echo "🩺 Checking health at $URL"
          for i in $(seq 1 10); do
            HTTP=$(curl --silent --show-error --fail \
                         --connect-timeout 10 \
                         --max-time 20 \
                         -w "%{http_code}" \
                         -o /dev/null \
                         $URL) || true
            if [[ "$HTTP" -ge 200 && "$HTTP" -lt 300 ]]; then
              echo "✅ MS Users is healthy (status $HTTP)"
              exit 0
            fi
            echo "⏳ Attempt $i failed (status $HTTP), retrying in 10s..."
            sleep 10
          done
          echo "❌ Health check failed after 10 attempts"
          exit 1
